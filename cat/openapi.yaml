openapi: 3.0.2
info:
    title: DX Catalogue Server APIs
    version: 1.0.0
    description: >+
        The Catalogue is DX's dataset discovery portal and metadata store.

        It enables *Providers* of datasources to describe them with DX based annotations

        to make discovery and consumption of data both automatable and semantically describable. 

        For search and discovery, it allows users to search through text and geo-based queries.

        The catalogue is a [JSON-LD](https://json-ld.org/) document stored and based on the
        [RDF](https://www.w3.org/RDF/) information exchange model. 

servers:
    -
        url: 'https://api.catalogue.iudx.org.in/i'
        description: Catalogue production API Server
paths:
    /iudx/cat/v1/search:
        get:
            tags:
                - Discovery
            parameters:
                -
                    name: property
                    description: >-
                        Array of properties (strings) on which query is to be made. The mapping between a
                        property and a value is one-to-one. The only allowed properties to be queried are per
                        the vocabulary schema mentioned in each Class of
                        [IUDXEntities](https://voc.iudx.org.in/IUDXEntities).
                    schema:
                        type: array
                        items:
                            type: string
                    in: query
                    required: false
                -
                    name: value
                    description: Values of the one-to-one mapped properties.
                    schema:
                        type: array
                        items:
                            type: string
                    in: query
                    required: false
                -
                    name: geoproperty
                    description: Name of the property if the query is on a geospatial property.
                    schema:
                        type: string
                    in: query
                -
                    name: georel
                    description: 'Type of geoquery, for e.g, within, near, outside.'
                    schema:
                        type: string
                    in: query
                    required: false
                -
                    name: geometry
                    description: 'Geometry of the geo-query, for e.g, linstring, bbox, polygon.'
                    schema:
                        type: string
                    in: query
                -
                    name: coordinates
                    description: >-
                        Coordinates for the specific query type. For e.g, [[1,2], [3,4]]. Note: The data-type
                        of this field is a string, therefore the coordinates are a string encoded
                        multidimensional array.
                    schema:
                        type: string
                    in: query
                    required: false
                -
                    name: q
                    description: query for text/fuzzy search.
                    schema:
                        type: string
                    in: query
                    required: false
                -
                    name: limit
                    description: Limit number of records in search response.
                    schema:
                        type: integer
                    in: query
                    required: false
                -
                    name: offset
                    description: Offset from where the next batch of results should be returned.
                    schema:
                        type: integer
                    in: query
                    required: false
                -
                    name: filter
                    description: Filter properties to display. This is an array of strings.
                    schema:
                        type: array
                        items:
                            type: string
                    in: query
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardResponseWithObjects'
                    description: All the query parameters yielded results.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardErrorResponse'
                    description: Bad query.
            operationId: search
            description: >
                This API implements the generic catalogue search. It searches for catalogue entites that meet
                the

                search query criteria. The search enpoint allows one to query a particular attribute/property
                of an

                entity, or by its geo-location annotation, or by a full text-search or a combination of

                all three.

                #### Property Search

                The property search is applicable to properties/attributes that are strings or array of
                strings. 

                One may combine multiple properties in a search through a logical-AND ("&&"). For each such
                property

                multiple matching values may be given. Multiple values for a given property are matched via a
                logical-OR

                ("||") operation. 

                The syntax for a property query is -
                `property=[<prop-1>,<prop-2>]&value=[[<prop-1-val-1>,<prop-1-val-2>],[<prop-2-val-1>]]`. 

                This search will return entities with the following matching rule: '{<prop-1> ==
                <prop-1-val-1> || <prop-1> == <prop-1-val-2> } &&  {<prop-2> == <prop-2-val-1> }'.

                For property search only exact string matches are applicable.

                Property search can be applied to any property and may include nested properties through
                `prop.subprop.subsubprop` syntax, wherever applicable. 

                Note that, an implementation may choose to expose only a limited set of attributes/properties
                for a given entity for this search, in which case such information should be made available by
                the respective implementations.

                Typically, this search is used to find entities with required values for properties such as

                `id`, `resourceGroup`, `provider`, `resourceServer`, `type` etc.

                Some common uses are 
                  - search discovery tags: `property=[tags]&value=[["aqm", "pollution"]]`
                  - search by type of entity: `property=[type]&value=[[iudx:ResourceGroup]]`. Valid entities are `iudx:Resource`, `iudx:ResourceGroup`, `iudx:Provider`, `iudx:ResourceServer`.
                  - search resources belonging to a group: `property=[resourceGroup]&value=[[<group-id>]]`

                #### Geo Search

                The Geo search is to search entities using geo-spatial attributes. Geo search accepts queries
                where input geo-shapes are based on GeoJSON [RFC 7946]. The params and their accepted values
                are -
                  - geoproperty: Which geo-property to query. Default is `location`.

                  - geometry: One of the following GeoJSON geometries: `Point`, `Polygon`, `LineString`, `bbox`. It allows to search for entities that satisfy a geo-relationship, specified via georel parameter, with the provided input shape.
                      - Point: To allow for input query shape of 'circle'. It must always be accompanied with query parameter 'maxDistance'. Together, 'Point' and 'maxDistance' represent the center and radius, respectively, for a circle.
                          - coordinates: The center point of the circle, for e.g, `[73,13]` (lon and lat)
                      - Polygon: Polygon/Multi-Polygon query
                          - coordinates: Coordinates of the polygon/s, for e.g, `[[[73,13],[73,12],[73,13]]]`.  Note, (lon and lat) and the first coordinate must be same as last.
                      - LineString: Linestring query
                          - coordinates: Coordinates of the multi-line, for e.g, `[[73,13],[74,15],[75,16]]`. 
                      - bbox: Bounding box query
                          - coordinates: `[[top-left],[bottom-right]]`, `[[73,13],[74,12]]`. 
                  - maxDistance: This parameters defines radius parameter when the input geo shape is a  circle. Applicable only when the geometry parameter is a 'Point'. maxDistance represents radius from the center point in meters, for e.g `100` 
                  - georel: Geo-relationship. One of `within`, 'intersects' and `disjoint`.
                    - 'within': Finds all entities whose point locations are within the close shaped query geometry.
                    - 'intersects': Finds all the entities whose geo shapes or geo points intersects with the query geometry.
                    - 'Disjoint': Finds all entities that have point locations or geo shapes falling outside the close shaped query geometry.
                    Note that in the above geo relationships 'within' and 'disjoint' are not applicable when input shape is 'Linestring'.
                    
                #### Text search

                This is a fuzzy full text based search. It returns entities that contains words that are
                'similar' to query text pattern. It searches across all entity types.   The set of
                properties/attributes that are part of text search is implementation dependent. Further, the
                notions of 'similarity'  or 'in-exactness of match' are also dependent on a given
                implementation and this information should be made available by the catalogue service
                implementations.

                  - q: Text to be queried

                #### Complex search

                A combination of the above is allowed to make searches more complex.


                #### Limits and filters
                  - Documents returned can be limited by specifying a limit and offset. For e.g, `limit=100&offset=10` gives 100 documents from the 10th search result.
                  - A subset of properties of returned documents can be filtered out. For e.g, `filter=[id]` returns documents with only the `id` property retained in the returned documents.
            x-codeSamples:
                -
                    lang: by type
                    source: >
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/search?property=[type]&value=[[iudx:ResourceGroup]]
                -
                    lang: by circle
                    source: >
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]
                -
                    lang: by text
                    source: |
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/search?q=aqm
                -
                    lang: complex
                    source: >
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/search?property=[type]&value=[[iudx:Resource]]&geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]
    /iudx/cat/v1/item:
        description: >
            Operations on a specific catalogue entity. This endpoint is used to create/update/read/delete a
            catalogue DX Entity.
        get:
            tags:
                - Entity
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        type: string
                    in: query
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardResponseWithObjects'
                    description: Found the item.
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/notFoundResponse'
                    description: Didn't find the item.
            operationId: getItem
            description: Retrieve a catalogue item by specifying the id for the item.
            x-codeSamples:
                -
                    lang: item by id
                    source: |
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/item?id=<some-id>
        put:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exapmleEntityWId'
                required: true
            tags:
                - Entity
            parameters:
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        type: string
                    in: header
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardCrudResponse'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/responseForValidationFailure'
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/responseForAuthFailure'
                    description: Unauthorized access
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/notFoundResponse'
                    description: Document doesn't exist
            operationId: updateItem
            description: >-
                Update an already existing catalogue item. The request body should contain the full item along
                with the existing 'id'. The contents for the catalogue item with the input 'id' will be
                overwritten with the request body contents.
            x-codeSamples:
                -
                    lang: update item
                    source: |
                        PUT /item HTTP/1.1
                        Host: api.catalogue.iudx.org.in
                        Content-Type: application/json
                        token: <iudx-token>
                        {
                          "id": "<id-of-the-onboarded-item>",
                          "oldParamA": "oldParamAValue",
                          "newParam": "newParamValue",
                          "oldParamB": "oldParamBNewValue"
                        }
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleEntityWoID'
                required: true
            tags:
                - Entity
            parameters:
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        type: string
                    in: header
                    required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardCrudResponse'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/responseForValidationFailure'
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/responseForAuthFailure'
                    description: Unauthorized access
            operationId: createItem
            description: >-
                Create a new catalogue item where the request body constitutes the contents of the catalogue
                item. The 'type' attribute in the request body specifies the type of caalogue item. All the
                properties for a given item type, as specified by the catalogue service implementation, should
                be provided in the request body. 
            x-codeSamples:
                -
                    lang: create item
                    source: |
                        POST /item HTTP/1.1
                        Host: api.catalogue.iudx.org.in
                        Content-Type: application/json
                        token: <iudx-token>
                        {
                          "name": "<name of the item (this will be used to generate id>",
                          "resourceGroup": "<id of group if this is a resource>",
                          "provider": "<id of the provider>",
                          "resourceServer": "<id of the resourceServer>"
                        }
        delete:
            tags:
                - Entity
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        type: string
                    in: query
                    required: true
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        type: string
                    in: header
                    required: true
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardCrudResponse'
                    description: Successfully deleted
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/responseForAuthFailure'
                    description: Unauthorized access
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/notFoundResponse'
                    description: Didn't find the item
            operationId: deleteItem
            description: Delete a catalogue item with a given 'id'.
            x-codeSamples:
                -
                    lang: delete item
                    source: |
                        DELETE /item?q=<some-id> HTTP/1.1
                        Host: api.catalogue.iudx.org.in
                        Content-Type: application/json
                        token: <iudx-token>
    /iudx/cat/v1/relationship:
        description: >-
            Relationship apis view all entities in the Catalogue as nodes of a graph and offer some "graph"
            like search capabilities on them.
        get:
            tags:
                - Relationship
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardResponseWithObjects'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardResponseWithObjects'
                    description: Item oor relationship doesn't exist
            operationId: getRelatedEntity
            description: >-
                This API allows one to retrieve documents which are connected by certain relationship
                attribute in an entity. It allows one to fetch an entity/entities that are immediate
                neighbor(s) of the input entity.

                To explain this API better we provide an illustrative catalogue graph connecting different
                catalogue entities below: 

                ```
                                          forward relationship
                                       ───────────────────►

                                                                         ┌─────────────────┐
                ┌───────────────┐                              provider  │                 │

                │               │ resourceGroup                    ┌─────►Provider PA      │

                │ Resource A    ├─────┐                            │     │                 │

                │               │     │    ┌─────────────────┐     │     └─────────────────┘

                └───────────────┘     │    │ ResourceGroup   ├─────┘
                                      └────► RG1             │
                ┌───────────────┐          │                 │

                │               │      ┌───►                 ├─────┐    ┌─────────────────┐

                │ Resource B    │      │   └─────────────────┘     │    │                 │

                │               ├──────┘                           │    │ResourceServer RS│

                └───────────────┘  resourceGroup                   └────►                 │
                                                                        └─────────────────┘
                                                           resourceServer



                                       ◄────────────────────
                                           inverse relationship
                ```   

                Given a resource item, say Resource A, one may want to retrieve the resource group item
                associated with it. Similarly, given a resource group item, say RG1, one may want to retrieve
                all resource entities that belong to this resource group. In the above example, the API should
                return resource entities A and B.

                The following table shows applicable queries for different entities.

                ``` 

                | Type of the entity (id) | Supported relationships for "rel"       |
                Description                                             |

                |-------------------------|-----------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|

                | Resource                | resourceGroup,resourceServer,  provider | Return the associated
                resourceGroup (or resourceServer or provider) entity. Only single entity is
                returned.              |

                | ResourceGroup           | resource                                | Return all resource
                items associated with the input resource group. Multiple entities may be
                returned.                       |

                | ResourceGroup           | resourceServer, provider                | Return the associated
                resourceServer (or provider) entity. Only single entity is
                returned.                               |

                | Provider                | resource, resourceGroup                 | Return all resource or
                resource group items associated with the input provider. Multiple entities maybe
                returned.                  |

                | ResourceServer          | resource, resourceGroup                 | Return all resource or
                resource group items associated with the input resource server. Multiple entities maybe
                returned.           |

                ```
            x-codeSamples:
                -
                    lang: search by relationship
                    source: |
                        https://api.catalogue.iudx.org.in/relationship?id=<some-entity-id>&rel=resourceGroup
        parameters:
            -
                name: id
                description: ID of the entity
                schema:
                    type: string
                in: query
                required: true
            -
                name: rel
                description: >-
                    Relationship attribute of the entity whose id is provided. For e.g provider,
                    resourceGroup, resourceServer.
                schema:
                    type: string
                in: query
                required: true
    '/iudx/cat/v1/list/{type}':
        description: |
            List all catalogue items of input item type. Currently, listing of all items 
            with the following types is supported: 'resourceGroup', 'resourceServer' and 'provider'.
        get:
            tags:
                - List
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardResponseWithStrings'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/standardErrorResponse'
                    description: Fail
            operationId: listTypes
            description: >
                List all catalogue items of input item type. Currently, listing of all items  with the
                following types is supported: 'resourceGroup', 'resourceServer' and 'provider'.
            x-codeSamples:
                -
                    lang: by tags
                    source: |
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/list/tags
                -
                    lang: by resourceGroup
                    source: |
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/list/resourceGroup
                -
                    lang: by provider
                    source: |
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/list/provider
        parameters:
            -
                name: type
                description: 'Type must be resourceGroup, resourceServer, provider.'
                schema:
                    type: string
                in: path
                required: true
components:
    schemas:
        standardResponseWithObjects:
            title: Root Type for standardResponse
            description: Standard Response for all requests
            required:
                - type
            type: object
            properties:
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
                type:
                    description: Detailed description of the status
                    enum:
                        - 'urn:iudx:cat:Success'
                    type: string
                title:
                    description: Title of the status. Usually a http status code title.
                    type: string
                detail:
                    description: Detailed explanation of the status code for the response if any.
            example:
                totalHits: 1
                results:
                    - {}
                type: 'urn:iudx:cat:Success'
                title: success
                detail: successfully executed query
        standardResponseWithStrings:
            title: Root Type for standardResponse
            description: Standard Response for all requests
            required: []
            type: object
            properties:
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of strings.
                    type: array
                    items:
                        type: object
                detail:
                    description: Detailed description of the status
                type:
                    description: Status of the request
                    enum:
                        - 'urn:iudx:cat:Success'
                        - 'urn:iudx:cat:InvalidListType'
                    type: string
                title:
                    description: Title of the status code type
                    type: string
            example:
                totalHits: 10
                results: []
                type: 'urn:iudx:cat:Success'
                title: Success
                detail: Successfully executed the list query
        standardErrorResponse:
            title: Root Type for standardErrorResponse
            description: Stand response body for error status
            required: []
            type: object
            properties:
                type:
                    description: Status code of the error. This is a urn and meant to be machine interpretable.
                    enum:
                        - 'urn:iudx:cat:InvalidGeoParam'
                        - 'urn:iudx:cat:InvalidGeoValue'
                        - 'urn:iudx:cat:InvalidProperty'
                        - 'urn:iudx:cat:InvalidPropertyValue'
                        - 'urn:iudx:cat:BadTextQuery'
                        - 'urn:iudx:cat:MethodNotAllowed'
                        - 'urn:iudx:cat:UnsupportedMediaType'
                        - 'urn:iudx:cat:InvalidRelationshipType'
                        - 'urn:iudx:cat:InvalidRelationParent'
                        - 'urn:iudx:cat:InvalidRelatedProperty'
                        - 'urn:iudx:cat:InvalidRelatedPropertyValue'
                        - 'urn:iudx:cat:InvalidListType'
                    type: string
                detail:
                    description: Detailed desciription of the status code if any
                    type: string
                title:
                    description: Title heading of the status. Usually a http status code title.
                    type: string
            example:
                status: fail
                description: failed due to invalid query
        exampleEntityWoID:
            title: Root Type for exampleEntityWoID
            description: An example entity without ID (For first time onboarding)
            type: object
            properties:
                '@context':
                    type: string
                name:
                    type: string
                type:
                    type: array
                    items:
                        type: string
            example:
                '@context': context-url
                name: some-name
                type:
                    - 'iudx:Resource'
        exapmleEntityWId:
            title: Root Type for exapmleEntityWId
            description: And example entity with id for updates
            type: object
            properties:
                '@context':
                    type: string
                id:
                    type: string
                name:
                    type: string
                type:
                    type: array
                    items:
                        type: string
            example:
                '@context': context-url
                id: some-id
                name: some-name
                type:
                    - 'iudx:Resource'
        standardCrudResponse:
            title: Root Type for standardCrudResponse
            description: Standard response for crud apis
            required: []
            type: object
            properties:
                results:
                    type: array
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                            method:
                                type: string
                            status:
                                type: string
                type:
                    enum:
                        - 'urn:iudx:cat:Success'
                    type: string
            example:
                type: 'urn:iudx:cat:Success'
                title: success
                results:
                    -
                        id: some-id
                        method: insert/delete/update
                        status: success
        responseForValidationFailure:
            title: Root Type for responseForLinkValidationFailure
            description: A standard response for all link validation failures
            required:
                - type
            type: object
            properties:
                type:
                    description: Type of the error
                    enum:
                        - 'urn:iudx:cat:WrongProvider'
                        - 'urn:iudx:cat:WrongResourceServer'
                        - 'urn:iudx:cat:WrongResourceGroup'
                        - 'urn:iudx:cat:InvalidSchema'
                        - 'urn:iudx:cat:AlreadyExists'
                    type: string
                title:
                    description: Title of the status. Usually a http status code title.
                    type: string
                detail:
                    description: Detailed explanation of the status code for the response if any.
                    type: string
            example:
                totalHits: 0
                results:
                    - {}
                type: 'urn:iudx:cat:WrongProvider'
                title: Bad Request
                detail: '''provider'' mentioned in the document is not appicable for given token or given link'
        responseForAuthFailure:
            title: Root Type for responseForAuthFailure
            description: A standard response for all authorization related failures.
            type: object
            properties:
                type:
                    description: Title of the status. Usually a http status code title.
                    type: string
                title:
                    description: Title of the status. Usually a http status code title.
                    type: string
                detail:
                    description: Detailed explanation of the status code for the response if any.
                    type: string
            example:
                type: 'urn:iudx:cat:TokenExpired'
                title: Unauthorized
                detail: Token used has expired
        notFoundResponse:
            title: Root Type for notFoundResponse
            description: Response for item not found
            type: object
            properties:
                totalHits:
                    format: int32
                    type: integer
                results:
                    type: array
                    items:
                        type: object
                type:
                    type: string
                title:
                    type: string
                detail:
                    type: string
            example:
                totalHits: 0
                results:
                    - {}
                type: 'urn:iudx:cat:ItemNotFound'
                title: Not Found
                detail: Item not found
tags:
    -
        name: Entity
        description: |
            Manage catalogue entities and perform Create/Update/Read/Delete (CRUD) operations on these.
            These APIs are intended to be used by DX Data *Providers*.
        x-displayName: Entity
    -
        name: Discovery
        description: |
            Discovery DX Entities using a rich discovery api supporting property, text and geo-based queries.
            These APIs are intended to be used by DX Data *Consumers*.
        x-displayName: Discovery
    -
        name: List
        description: |
            List DX Entities of a certain type.
            These APIs are intended to be used by DX Data *Consumers*.
        x-displayName: List
    -
        name: Relationship
        description: |
            Discovery of entities through their relationships.
            These APIs are intended to be used by DX Data *Consumers*.
        x-displayName: Relationship

